@model InvoiceModle
@{
    ViewBag.Title = "InvoiceLst";
    Layout = "~/Views/Shared/_BaseLayout.cshtml";
}

@section headtag
{
    <script>
    var onWrite = function (store, operation) {
        var record = operation.getRecords()[0],
            name = Ext.String.capitalize(operation.action),
            verb;

        if (name == 'Destroy') {
            verb = 'Destroyed';
        } else {
            verb = name + 'd';
        }
        Ext.util.Format.date();
        Ext.net.Notification.show({ title: name, html: Ext.String.format("{0} 发票: {1}<br/>{2}", verb, record.getId(), operation.getResultSet().message) });
    };
</script>

}

@section content
{
    @Html.X().Viewport().Layout(LayoutType.Fit).Items(
        Html.X().GridPanel()
            .Frame(true)
            .Height(400)
            .Width(500)
            .Store(
                Html.X().StoreForModel().Control(s =>
                {
                    s.AutoSync = true;
                    s.Proxy.Add(
                        new RestProxy
                        {
                            AppendAction = false,
                            Reader = {
                                new JsonReader {
                                    RootProperty = "data",
                                    MessageProperty = "message"
                                }
                            },
                            API =
                            {
                                Read = Url.Action("Read"),
                                Update = Url.Action("Update"),
                                Create = Url.Action("Create"),
                                Destroy = Url.Action("Destroy")
                            },
                            Writer = {
                                new JsonWriter
                                {
                                    AllowSingle = true
                                }
                            }
                        }
                        );
                    s.Listeners.Write.Fn = "onWrite";
                    s.Listeners.Write.Delay = 1;
                })
            )
            .ColumnModel(
                Html.X().ColumnFor(Model, m => m.Id)
                    .ToBuilder<Column.Builder>()
                    .Width(40)
                    .Renderer("return record.phantom ? '' : value;"),

                Html.X().ColumnFor(Model, m => m.InvoiceNo)
                    .ToBuilder<Column.Builder>()
                    .Flex(1)
                    .Editor(
                        Html.X().TextField().AllowBlank(false)
                    ),

                Html.X().ColumnFor(Model, m => m.AmountNoTax)
                    .ToBuilder<Column.Builder>()
                    .Flex(1)
                    .Editor(
                        Html.X().TextField().AllowBlank(false)
                    ),

                Html.X().ColumnFor(Model, m => m.InvoiceDate)
                    .ToBuilder<Column.Builder>()
                    .Flex(1).Renderer("return Ext.util.Format.date(value, 'Y-m-d');")
                    .Editor(
                        Html.X().DateField().AllowBlank(false)
                    )
            )
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        Html.X().Button()
                            .Text("Add")
                            .Icon(Icon.Add)
                            .Handler("this.up('grid').store.insert(0, new Person());this.up('grid').editingPlugin.startEdit(0, 0);"),

                        Html.X().Button()
                            .ItemID("btnRemove")
                            .Text("Delete")
                            .Icon(Icon.Exclamation)
                            .Handler("this.up('grid').deleteSelected();")
                    )
            )
            .Plugins(
                Html.X().RowEditing()
                    .Listeners(l =>
                    {
                        l.CancelEdit.Handler = "if(e.record.phantom){e.store.remove(e.record);}";
                    })
            ))
}
